%% -*- mode: erlang -*-
-module({{classname}}).

%% generated methods
{{#operations}}{{#operation}}
-export([{{operationId}}/2]).
-export([{{operationId}}/3]).
{{/operation}}{{/operations}}
{{#operations}}{{#operation}}
-spec {{operationId}}(Endpoint :: {{packageName}}:endpoint(), Params :: map()) ->
    {ok, Code :: integer(), RespHeaders :: list(), Response :: map()} |
    {error, _Reason}.
{{operationId}}(Endpoint, Params) ->
    {{operationId}}(Endpoint, Params, []).

-spec {{operationId}}(Endpoint :: {{packageName}}:endpoint(), Params :: map(), Opts :: {{packageName}}:transport_opts()) ->
    {ok, Code :: integer(), RespHeaders :: list(), Response :: map()} |
    {error, _Reason}.
{{operationId}}(Endpoint, Params, Opts) ->
    process_response({{packageName}}_procession:process_request(
        {{httpMethod}},
        {{packageName}}_utils:get_url(Endpoint, "{{basePathWithoutHost}}{{path}}"),
        Params,
        get_request_spec({{operationId}}),
        Opts
    ), {{operationId}}).
{{/operation}}{{/operations}}
process_response({ok, Code, Headers, RespBody}, OperationID) ->
    try {{packageName}}_procession:process_response(
        get_response_spec(OperationID, Code),
        RespBody
    ) of
        {ok, Resp} ->
            {ok, Code, Headers, Resp};
        Error ->
            Error
    catch
        error:invalid_response_code ->
            {error, {invalid_response_code, Code}}
    end;
process_response(Error, _) ->
    Error.


-spec get_request_spec(OperationID :: {{packageName}}:operation_id()) ->
    Spec :: {{packageName}}_procession:request_spec() | no_return().

{{#operations}}{{#operation}}
{{!
    NOTICE: Datatype definition was taken out of api.param_info partial since `items` context makes it impossible
    to check if we are currently in a list container. This information is required to get the data type from the correct
    source (`datatype` field of class `CodegenProperty`, instead of `dataType` field of class `CodegenParameter`)
}}
get_request_spec('{{operationId}}') ->
    [
        {{#allParams}}{{^isBodyParam}}{'{{baseName}}'{{/isBodyParam}}{{#isBodyParam}}{'{{dataType}}'{{/isBodyParam}}, #{
            source => {{#isQueryParam}}qs_val{{/isQueryParam}}{{#isPathParam}}binding{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}{{#isFormParam}}form_data{{/isBodyParam}},
            rules  => [{{^isBodyParam}}{{#isListContainer}}{list, '{{collectionFormat}}', {{#items}}[{{#datatype}}{type, '{{datatype}}'}, {{/datatype}}{{>api.param_info}}]{{/items}}}, {{/isListContainer}}{{^isListContainer}}{{#dataType}}{type, '{{dataType}}'}, {{/dataType}}{{/isListContainer}}{{>api.param_info}}, {{/isBodyParam}}{{#isBodyParam}}schema, {{/isBodyParam}}{required, {{#required}}true{{/required}}{{^required}}false{{/required}}}]
        }}{{#hasMore}},
        {{/hasMore}}{{/allParams}}
    ]{{#hasMore}};{{/hasMore}}{{/operation}}.{{/operations}}

-spec get_response_spec(OperationID :: {{packageName}}:operation_id(), Code :: {{packageName}}_procession:code()) ->
    Spec :: {{packageName}}_procession:response_spec() | no_return().

{{#operations}}{{#operation}}{{#responses}}
get_response_spec('{{operationId}}', {{code}}) ->
    {{#dataType}}{'{{dataType}}', '{{baseType}}'};{{/dataType}}{{^dataType}}undefined;{{/dataType}}
{{/responses}}{{/operation}}{{/operations}}
get_response_spec(_, _) ->
    error(invalid_response_code).
